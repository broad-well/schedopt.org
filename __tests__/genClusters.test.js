import assert from "assert";
import { allClusters } from "../src/genClusters.js";
import spanish232 from "../soc-samples/spanish232.json" assert { type: "json" };
import eecs203 from "../soc-samples/eecs203.json" assert { type: "json" };
import math215 from "../soc-samples/math215.json" assert { type: "json" };
import { readdirSync, readFileSync } from "fs";
import { join } from "path";

describe("allClusters", () => {
  it("should return clusters of size 1 for SPANISH 232", () => {
    assert.deepEqual(
      allClusters(spanish232.getSOCSectionsResponse.Section),
      new Set([
        ["001"],
        ["002"],
        ["003"],
        ["005"],
        ["007"],
        ["009"],
        ["011"],
        ["013"],
        ["014"],
        ["015"],
        ["016"],
        ["017"],
        ["018"],
        ["019"],
        ["023"],
        ["024"],
        ["025"],
        ["026"],
        ["027"],
        ["031"],
        ["032"],
        ["033"],
        ["034"],
        ["036"],
        ["039"],
        ["040"],
        ["041"],
        ["043"],
        ["045"],
        ["047"],
        ["048"],
        ["049"],
        ["055"],
        ["057"],
        ["059"],
        ["060"],
        ["065"],
        ["067"],
        ["071"],
        ["075"],
        ["077"],
      ]),
    );
  });
  it("should return all LEC-DIS combos for EECS 203", () => {
    const clusters = allClusters(eecs203.getSOCSectionsResponse.Section);
    assert.deepEqual(
      Array.from(clusters).sort(),
      [
        ["001", "011"],
        ["001", "012"],
        ["001", "013"],
        ["001", "014"],
        ["001", "015"],
        ["001", "016"],
        ["001", "017"],
        ["001", "018"],
        ["001", "019"],
        ["001", "020"],
        ["001", "021"],
        ["001", "022"],
        ["001", "023"],
        ["001", "024"],
        ["001", "025"],
        ["001", "026"],
        ["001", "027"],
        ["001", "028"],
        ["001", "029"],
        ["001", "030"],
        ["001", "031"],
        ["001", "032"],
        ["001", "033"],
        ["001", "034"],
        ["002", "011"],
        ["002", "012"],
        ["002", "013"],
        ["002", "014"],
        ["002", "015"],
        ["002", "016"],
        ["002", "017"],
        ["002", "018"],
        ["002", "019"],
        ["002", "020"],
        ["002", "021"],
        ["002", "022"],
        ["002", "023"],
        ["002", "024"],
        ["002", "025"],
        ["002", "026"],
        ["002", "027"],
        ["002", "028"],
        ["002", "029"],
        ["002", "030"],
        ["002", "031"],
        ["002", "032"],
        ["002", "033"],
        ["002", "034"],
        ["003", "011"],
        ["003", "012"],
        ["003", "013"],
        ["003", "014"],
        ["003", "015"],
        ["003", "016"],
        ["003", "017"],
        ["003", "018"],
        ["003", "019"],
        ["003", "020"],
        ["003", "021"],
        ["003", "022"],
        ["003", "023"],
        ["003", "024"],
        ["003", "025"],
        ["003", "026"],
        ["003", "027"],
        ["003", "028"],
        ["003", "029"],
        ["003", "030"],
        ["003", "031"],
        ["003", "032"],
        ["003", "033"],
        ["003", "034"],
        ["004", "011"],
        ["004", "012"],
        ["004", "013"],
        ["004", "014"],
        ["004", "015"],
        ["004", "016"],
        ["004", "017"],
        ["004", "018"],
        ["004", "019"],
        ["004", "020"],
        ["004", "021"],
        ["004", "022"],
        ["004", "023"],
        ["004", "024"],
        ["004", "025"],
        ["004", "026"],
        ["004", "027"],
        ["004", "028"],
        ["004", "029"],
        ["004", "030"],
        ["004", "031"],
        ["004", "032"],
        ["004", "033"],
        ["004", "034"],
        ["005", "011"],
        ["005", "012"],
        ["005", "013"],
        ["005", "014"],
        ["005", "015"],
        ["005", "016"],
        ["005", "017"],
        ["005", "018"],
        ["005", "019"],
        ["005", "020"],
        ["005", "021"],
        ["005", "022"],
        ["005", "023"],
        ["005", "024"],
        ["005", "025"],
        ["005", "026"],
        ["005", "027"],
        ["005", "028"],
        ["005", "029"],
        ["005", "030"],
        ["005", "031"],
        ["005", "032"],
        ["005", "033"],
        ["005", "034"],
        ["006", "011"],
        ["006", "012"],
        ["006", "013"],
        ["006", "014"],
        ["006", "015"],
        ["006", "016"],
        ["006", "017"],
        ["006", "018"],
        ["006", "019"],
        ["006", "021"],
        ["006", "022"],
        ["006", "023"],
        ["006", "024"],
        ["006", "025"],
        ["006", "026"],
        ["006", "028"],
        ["006", "029"],
        ["006", "030"],
        ["006", "031"],
        ["006", "032"],
        ["006", "033"],
        ["006", "034"],
      ].sort(),
    );
  });
  it("should respect auto-enroll in MATH 215 and ignore midterms", () => {
    const clusters = allClusters(math215.getSOCSectionsResponse.Section);
    assert.deepEqual(clusters, new Set([
      ["010", "011"],
      ["010", "012"],
      ["010", "013"],
      ["010", "014"],
      ["020", "021"],
      ["020", "022"],
      ["020", "023"],
      ["020", "024"],
      ["030", "031"],
      ["030", "032"],
      ["030", "033"],
      ["030", "034"],
      ["040", "041"],
      ["040", "042"],
      ["040", "043"],
      ["040", "044"],
      ["050", "051"],
      ["050", "052"],
      ["050", "053"],
      ["050", "054"],
      ["060", "061"],
      ["060", "062"],
      ["060", "063"],
      ["060", "064"],
      ["070", "071"],
      ["070", "072"],
      ["070", "073"],
      ["070", "074"],
      ["080", "081"],
      ["080", "082"],
      ["080", "083"],
      ["080", "084"],
      ["090", "091"],
      ["090", "092"],
      ["090", "093"],
      ["090", "094"],
    ]));
  });
  it('should compute the correct clusters for a variety of popular courses', () => {
    const files = readdirSync('atlas-samples')
    for (const file of files) {
      const expectedClusterList = JSON.parse(readFileSync(join('atlas-samples', file), {encoding: 'utf-8'})).map(cluster => cluster.filter(section => !section.includes('MID')))
      let sections = JSON.parse(readFileSync(join('soc-samples', file), {encoding: 'utf-8'})).getSOCSectionsResponse.Section
      if (!(sections instanceof Array)) sections = [sections];
      assert.deepEqual(Array.from(allClusters(sections)).sort(), expectedClusterList.sort(), 'Failed on ' + file.split('.')[0].toUpperCase())
    }
  });
});
